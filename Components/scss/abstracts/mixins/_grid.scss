// ===============================
// ðŸ”¢ Grid System
// ===============================

@use 'sass:math';
@use 'sass:map';
@use '../mixins/media' as *;
@use '../mixins/make-col' as *;
@use '../mixins/make-col-offset' as *;

// Mixin pentru generarea coloanelor responsive
// $columns: numÄƒr de coloane (ex. 12)
// $gutter: spaÈ›iu Ã®ntre coloane
// $breakpoints: map cu breakpoint-uri (ex. (sm: 576px, md: 768px, lg: 992px))
@mixin make-grid-columns($columns, $gutter, $breakpoints) {
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px;
    padding-right: math.div($gutter, 2);
    padding-left: math.div($gutter, 2);
  }

  // Loop prin fiecare breakpoint
  @each $breakpoint in map.keys($breakpoints) {
    // Generare clase col-{breakpoint}-{1..columns}
    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }

    // Clase generice col-{breakpoint} È™i col-{breakpoint}-auto
    .col-#{$breakpoint},
    .col-#{$breakpoint}-auto {
      @extend %grid-column;
    }

    // Stiluri responsive pentru fiecare breakpoint
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .col-#{$breakpoint} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .col-#{$breakpoint}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
      }

      // Generare col-{breakpoint}-{1..columns} cu mixin make-col
      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      // Order classes
      .order-#{$breakpoint}-first { order: -1; }
      .order-#{$breakpoint}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order-#{$breakpoint}-#{$i} {
          order: $i;
        }
      }

      // Offset classes
      @for $i from 0 through ($columns - 1) {
        .offset-#{$breakpoint}-#{$i} {
          @include make-col-offset($i, $columns);
        }
      }
    }
  }
}
